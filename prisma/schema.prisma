generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  fullName        String
  email           String    @unique
  password        String
  bio             String?
  profileImageURL String?
  isVerified      Boolean   @default(false)

  posts           Post[]    // Relation to track posts by this user
  likes           Like[]    // Relation to track likes by this user
  comments        Comment[] // Relation to track comments by this user
  bookmarks       BookMark[] // Relation to track bookmarks by this user

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations to Followers and Followings through the join model
  following       Follow[]  @relation("Following") // Relation to users being followed
  followers       Follow[]  @relation("Follower")  // Relation to users who follow
}

model Post {
  id        String    @id @default(cuid())
  content   String?
  imgURL    String

  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]    // Relation to track likes on this post
  comments  Comment[] // Relation to track comments on this post
  bookmarks BookMark[] // Relation to track bookmarks on this post

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Ensure that a user can like a post only once
}

model Comment {
  id        String   @id @default(cuid())
  content   String

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookMark {
  id        String   @id @default(cuid())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId]) // Ensure that a user can like a post only once
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String

  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Ensure a user cannot follow the same user multiple times
}
